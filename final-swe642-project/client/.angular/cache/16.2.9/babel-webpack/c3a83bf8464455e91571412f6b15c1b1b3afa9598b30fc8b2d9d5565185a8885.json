{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\18049\\Desktop\\CS642\\SWE642\\final-swe642-project\\client\\src\\app\\survey-form\\survey-form.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { } from\r\n\r\n  @Component({\r\n    selector: 'app-survey-form',\r\n    templateUrl: './survey-form.component.html',\r\n    styleUrls: ['./survey-form.component.css']\r\n  })\r\n  export class SurveyFormComponent {\r\n    constructor(private router: Router) { }\r\n\r\n    user: Survey = {\r\n      firstName: '',\r\n      lastName: '',\r\n      address: '',\r\n      city: '',\r\n      state: '',\r\n      zip: '',\r\n      telephone: '',\r\n      email: '',\r\n      dateOfSurvey: '',\r\n      likedAboutCampus: '',\r\n      interestOrigin: '',\r\n      recommendationLikelihood: '',\r\n      feedback: '',\r\n      additionalComments: '',\r\n    };\r\n\r\n    // Error messages will be stored here\r\n    formErrors: { [key: string]: string; } = {\r\n      firstName: '',\r\n      lastName: '',\r\n      address: '',\r\n      city: '',\r\n      state: '',\r\n    };\r\n\r\n    onSubmit(form: NgForm) {\r\n\r\n      if (!form.valid) {\r\n        return;\r\n      }\r\n      // Clear previous errors\r\n      this.clearFormErrors();\r\n\r\n      // Validate each field and accumulate error messages\r\n      this.formErrors['firstName'] = this.validateName(this.user.firstName, \"first\").join(' ');\r\n      this.formErrors['lastName'] = this.validateName(this.user.lastName, \"last\").join(' ');\r\n      this.formErrors['address'] = this.validateAddress(this.user.address).join(' ');\r\n      this.formErrors['city'] = this.validateCity(this.user.city).join(' ');\r\n      this.formErrors['state'] = this.validateState(this.user.state).join(' ');\r\n\r\n      // Collect error messages\r\n      const errorMessages = this.collectErrorMessages();\r\n\r\n      // Check if there are any error messages\r\n      if (errorMessages.length) {\r\n        // Alert the error messages\r\n        window.alert(errorMessages);\r\n        return; // Stop the submission since there are errors\r\n      }\r\n      // If there are no errors, proceed with form submission\r\n      console.log('Form data', form.value);\r\n      // After submission logic, navigate to the root page\r\n      // TODO: Add form submission logic here\r\n      this.router.navigate(['/']);\r\n\r\n    }\r\n\r\n    // Helper method to collect error messages\r\n    private collectErrorMessages(): string {\r\n      return Object.values(this.formErrors).filter(error => error.length > 0).join('\\n');\r\n    }\r\n\r\n    private clearFormErrors() {\r\n      for (const key in this.formErrors) {\r\n        if (this.formErrors.hasOwnProperty(key)) {\r\n          const formKey = key as keyof typeof this.formErrors;\r\n          this.formErrors[formKey] = '';\r\n        }\r\n      }\r\n    }\r\n\r\n    validateName(name: string, type: string): string[] {\r\n      let message = \"\";\r\n      if (type === \"first\") {\r\n        message = \"First name should only contain alphabet letters.\";\r\n      }\r\n      else {\r\n        message = \"Last name should only contain alphabet letters.\";\r\n      }\r\n      const regexName = /^[a-zA-Z\\s]+$/;\r\n      return regexName.test(name) ? [] : [message];\r\n    }\r\n\r\n    validateAddress(address: string): string[] {\r\n      const regexAddress = /^\\d+\\s[A-Za-z0-9\\s.,'-]+$/;\r\n      return regexAddress.test(address) ? [] : [\"Address is not fomrmatted correctly, it should only contain alphanumeric values, commas, periods, apostrophes, hyphens, and spaces.\"];\r\n    }\r\n\r\n    validateCity(city: string): string[] {\r\n      const regexCity = /^[A-Za-z\\s]+$/;\r\n      return regexCity.test(city) ? [] : [\"City should only contain letters and spaces.\"];\r\n    }\r\n\r\n    validateState(state: string): string[] {\r\n      const regexState = /^[A-Za-z]{2}$/;\r\n      const statesArray = [\r\n        'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL',\r\n        'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT',\r\n        'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI',\r\n        'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'\r\n      ];\r\n      return regexState.test(state) && statesArray.includes(state.toUpperCase()) ? [] : [\"State should be a 2-letter code corresponding to a valid US state.\"];\r\n    }\r\n\r\n    onReset(form: NgForm) {\r\n      // Reset the form (including user values)\r\n      form.resetForm();\r\n\r\n      // Clear form errors\r\n      this.clearFormErrors();\r\n\r\n      // Clear radio buttons and checkboxes\r\n      const checkboxes = document.querySelectorAll<HTMLInputElement>('input[type=\"checkbox\"]');\r\n      checkboxes.forEach((checkbox) => {\r\n        checkbox.checked = false;\r\n      });\r\n\r\n      const radios = document.querySelectorAll<HTMLInputElement>('input[type=\"radio\"]');\r\n      radios.forEach((radio) => {\r\n        radio.checked = false;\r\n      });\r\n\r\n      // Clear datalists\r\n      const datalists = document.querySelectorAll<HTMLInputElement>('input[list]');\r\n      datalists.forEach((datalist) => {\r\n        datalist.value = '';\r\n      });\r\n\r\n      // Clear text areas\r\n      const textareas = document.querySelectorAll<HTMLTextAreaElement>('textarea');\r\n      textareas.forEach((textarea) => {\r\n        textarea.value = '';\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}