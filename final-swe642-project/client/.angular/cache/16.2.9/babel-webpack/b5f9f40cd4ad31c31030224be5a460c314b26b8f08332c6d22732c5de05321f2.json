{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/survey.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class SurveyFormComponent {\n  constructor(surveyService,\n  // Inject the SurveyService\n  router) {\n    this.surveyService = surveyService;\n    this.router = router;\n    this.user = {\n      firstName: '',\n      lastName: '',\n      address: '',\n      city: '',\n      state: '',\n      zip: '',\n      tel: '',\n      date: '',\n      email: ''\n    };\n    // Error messages will be stored here\n    this.formErrors = {\n      firstName: '',\n      lastName: '',\n      address: '',\n      city: '',\n      state: ''\n    };\n  }\n  onSubmit(form) {\n    if (!form.valid) {\n      return;\n    }\n    // Clear previous errors\n    this.clearFormErrors();\n    // Validate each field and accumulate error messages\n    this.formErrors['firstName'] = this.validateName(this.user.firstName, \"first\").join(' ');\n    this.formErrors['lastName'] = this.validateName(this.user.lastName, \"last\").join(' ');\n    this.formErrors['address'] = this.validateAddress(this.user.address).join(' ');\n    this.formErrors['city'] = this.validateCity(this.user.city).join(' ');\n    this.formErrors['state'] = this.validateState(this.user.state).join(' ');\n    // Collect error messages\n    const errorMessages = this.collectErrorMessages();\n    // Check if there are any error messages\n    if (errorMessages.length) {\n      // Alert the error messages\n      window.alert(errorMessages);\n      return; // Stop the submission since there are errors\n    }\n    // If there are no errors, proceed with form submission\n    console.log('Form data', form.value);\n    // After submission logic, navigate to the root page\n    user: Survey = {\n      firstName: '',\n      lastName: '',\n      address: '',\n      city: '',\n      state: '',\n      zip: '',\n      telephone: '',\n      email: '',\n      dateOfSurvey: '',\n      likedAboutCampus: '',\n      interestOrigin: '',\n      recommendationLikelihood: '',\n      feedback: '',\n      additionalComments: ''\n    };\n    // TODO: Add form submission logic here\n    this.router.navigate(['/']);\n  }\n  // Helper method to collect error messages\n  collectErrorMessages() {\n    return Object.values(this.formErrors).filter(error => error.length > 0).join('\\n');\n  }\n  clearFormErrors() {\n    for (const key in this.formErrors) {\n      if (this.formErrors.hasOwnProperty(key)) {\n        const formKey = key;\n        this.formErrors[formKey] = '';\n      }\n    }\n  }\n  validateName(name, type) {\n    let message = \"\";\n    if (type === \"first\") {\n      message = \"First name should only contain alphabet letters.\";\n    } else {\n      message = \"Last name should only contain alphabet letters.\";\n    }\n    const regexName = /^[a-zA-Z\\s]+$/;\n    return regexName.test(name) ? [] : [message];\n  }\n  validateAddress(address) {\n    const regexAddress = /^\\d+\\s[A-Za-z0-9\\s.,'-]+$/;\n    return regexAddress.test(address) ? [] : [\"Address is not fomrmatted correctly, it should only contain alphanumeric values, commas, periods, apostrophes, hyphens, and spaces.\"];\n  }\n  validateCity(city) {\n    const regexCity = /^[A-Za-z\\s]+$/;\n    return regexCity.test(city) ? [] : [\"City should only contain letters and spaces.\"];\n  }\n  validateState(state) {\n    const regexState = /^[A-Za-z]{2}$/;\n    const statesArray = ['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'];\n    return regexState.test(state) && statesArray.includes(state.toUpperCase()) ? [] : [\"State should be a 2-letter code corresponding to a valid US state.\"];\n  }\n  onReset(form) {\n    // Reset the form (including user values)\n    form.resetForm();\n    // Clear form errors\n    this.clearFormErrors();\n    // Clear radio buttons and checkboxes\n    const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n    checkboxes.forEach(checkbox => {\n      checkbox.checked = false;\n    });\n    const radios = document.querySelectorAll('input[type=\"radio\"]');\n    radios.forEach(radio => {\n      radio.checked = false;\n    });\n    // Clear datalists\n    const datalists = document.querySelectorAll('input[list]');\n    datalists.forEach(datalist => {\n      datalist.value = '';\n    });\n    // Clear text areas\n    const textareas = document.querySelectorAll('textarea');\n    textareas.forEach(textarea => {\n      textarea.value = '';\n    });\n  }\n  static #_ = this.ɵfac = function SurveyFormComponent_Factory(t) {\n    return new (t || SurveyFormComponent)(i0.ɵɵdirectiveInject(i1.SurveyService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SurveyFormComponent,\n    selectors: [[\"app-survey-form\"]],\n    decls: 94,\n    vars: 9,\n    consts: [[1, \"form-container\"], [\"ngNativeValidate\", \"\", 1, \"form-section\", 3, \"ngSubmit\"], [\"surveyForm\", \"ngForm\"], [1, \"image-container\"], [\"src\", \"assets/logo2.png\", \"alt\", \"GMU mascot\"], [1, \"feedback-box\"], [\"for\", \"firstName\", 1, \"required-label\"], [\"type\", \"text\", \"id\", \"firstName\", \"name\", \"firstName\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"lastName\", 1, \"required-label\"], [\"type\", \"text\", \"id\", \"lastName\", \"name\", \"lastName\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"email\", 1, \"required-label\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"required\", \"\", \"placeholder\", \"example@domain.com\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"address\", 1, \"required-label\"], [\"type\", \"text\", \"id\", \"address\", \"name\", \"address\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"city\", 1, \"required-label\"], [\"type\", \"text\", \"id\", \"city\", \"name\", \"city\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"state\", 1, \"required-label\"], [\"type\", \"text\", \"id\", \"state\", \"name\", \"state\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"zip\", 1, \"required-label\"], [\"type\", \"text\", \"id\", \"zip\", \"name\", \"zip\", \"pattern\", \"\\\\d{5}(-\\\\d{4})?\", \"title\", \"Please enter a valid ZIP code.\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"tel\", 1, \"required-label\"], [\"type\", \"tel\", \"id\", \"tel\", \"name\", \"tel\", \"pattern\", \"[0-9]{3}-[0-9]{3}-[0-9]{4}\", \"title\", \"Format: 123-456-7890\", \"required\", \"\", \"placeholder\", \"555-555-5555\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"date\", 1, \"required-label\"], [\"type\", \"date\", \"id\", \"date\", \"name\", \"date\", \"required\", \"\", \"placeholder\", \"YYYY-MM-DD\", 3, \"ngModel\", \"ngModelChange\"], [1, \"preferences-box\"], [1, \"checkbox-label\"], [\"type\", \"checkbox\", \"id\", \"students\", \"name\", \"preferences\", \"value\", \"students\"], [\"type\", \"checkbox\", \"id\", \"location\", \"name\", \"preferences\", \"value\", \"location\"], [\"type\", \"checkbox\", \"id\", \"campus\", \"name\", \"preferences\", \"value\", \"campus\"], [\"type\", \"checkbox\", \"id\", \"atmosphere\", \"name\", \"preferences\", \"value\", \"atmosphere\"], [\"type\", \"checkbox\", \"id\", \"dorm_rooms\", \"name\", \"preferences\", \"value\", \"dorm_rooms\"], [\"type\", \"checkbox\", \"id\", \"sports\", \"name\", \"preferences\", \"value\", \"sports\"], [1, \"radio-label\"], [\"type\", \"radio\", \"id\", \"friends\", \"name\", \"interest\", \"value\", \"friends\"], [\"type\", \"radio\", \"id\", \"television\", \"name\", \"interest\", \"value\", \"television\"], [\"type\", \"radio\", \"id\", \"internet\", \"name\", \"interest\", \"value\", \"internet\"], [\"type\", \"radio\", \"id\", \"other\", \"name\", \"interest\", \"value\", \"other\"], [\"for\", \"recommendation\"], [\"list\", \"recommending\", \"id\", \"recommendation\", \"name\", \"recommendation\"], [\"id\", \"recommending\"], [\"value\", \"Very Likely\"], [\"value\", \"Likely\"], [\"value\", \"Unlikely\"], [\"rows\", \"5\", \"cols\", \"50\", \"placeholder\", \"Type your feedback here...\"], [\"for\", \"additionalComments\"], [\"id\", \"additionalComments\", \"rows\", \"5\", \"cols\", \"50\", \"placeholder\", \"Type any additional comments here...\"], [\"type\", \"submit\"], [\"type\", \"button\", 3, \"click\"]],\n    template: function SurveyFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function SurveyFormComponent_Template_form_ngSubmit_1_listener() {\n          i0.ɵɵrestoreView(_r1);\n          const _r0 = i0.ɵɵreference(2);\n          return i0.ɵɵresetView(ctx.onSubmit(_r0));\n        });\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelement(4, \"img\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5)(6, \"label\", 6);\n        i0.ɵɵtext(7, \"First Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.user.firstName = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"label\", 8);\n        i0.ɵɵtext(10, \"Last Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.user.lastName = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"label\", 10);\n        i0.ɵɵtext(13, \"Email:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_14_listener($event) {\n          return ctx.user.email = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"label\", 12);\n        i0.ɵɵtext(16, \"Address:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_17_listener($event) {\n          return ctx.user.address = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"label\", 14);\n        i0.ɵɵtext(19, \"City:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 15);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_20_listener($event) {\n          return ctx.user.city = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"label\", 16);\n        i0.ɵɵtext(22, \"State:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"input\", 17);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_23_listener($event) {\n          return ctx.user.state = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"label\", 18);\n        i0.ɵɵtext(25, \"Zip:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"input\", 19);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_26_listener($event) {\n          return ctx.user.zip = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"label\", 20);\n        i0.ɵɵtext(28, \"Telephone Number:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"input\", 21);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_29_listener($event) {\n          return ctx.user.tel = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"label\", 22);\n        i0.ɵɵtext(31, \"Date of Survey:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"input\", 23);\n        i0.ɵɵlistener(\"ngModelChange\", function SurveyFormComponent_Template_input_ngModelChange_32_listener($event) {\n          return ctx.user.date = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(33, \"div\", 24)(34, \"h5\");\n        i0.ɵɵtext(35, \"What did you like most about the campus?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"label\", 25);\n        i0.ɵɵelement(37, \"input\", 26);\n        i0.ɵɵtext(38, \" Students\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"label\", 25);\n        i0.ɵɵelement(40, \"input\", 27);\n        i0.ɵɵtext(41, \" Location\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"label\", 25);\n        i0.ɵɵelement(43, \"input\", 28);\n        i0.ɵɵtext(44, \" Campus\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"label\", 25);\n        i0.ɵɵelement(46, \"input\", 29);\n        i0.ɵɵtext(47, \" Atmosphere\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"label\", 25);\n        i0.ɵɵelement(49, \"input\", 30);\n        i0.ɵɵtext(50, \" Dorms\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"label\", 25);\n        i0.ɵɵelement(52, \"input\", 31);\n        i0.ɵɵtext(53, \" Sports\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(54, \"br\")(55, \"br\");\n        i0.ɵɵelementStart(56, \"h5\");\n        i0.ɵɵtext(57, \"How did you become interested in the university?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"label\", 32);\n        i0.ɵɵelement(59, \"input\", 33);\n        i0.ɵɵtext(60, \" Friends\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(61, \"label\", 32);\n        i0.ɵɵelement(62, \"input\", 34);\n        i0.ɵɵtext(63, \" Television\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(64, \"label\", 32);\n        i0.ɵɵelement(65, \"input\", 35);\n        i0.ɵɵtext(66, \" Internet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(67, \"label\", 32);\n        i0.ɵɵelement(68, \"input\", 36);\n        i0.ɵɵtext(69, \" Other\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(70, \"br\")(71, \"br\");\n        i0.ɵɵelementStart(72, \"label\", 37)(73, \"h5\");\n        i0.ɵɵtext(74, \"Likelihood Of Recommending This School To Other Students:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(75, \"input\", 38);\n        i0.ɵɵelementStart(76, \"datalist\", 39);\n        i0.ɵɵelement(77, \"option\", 40)(78, \"option\", 41)(79, \"option\", 42);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(80, \"div\", 5)(81, \"h3\");\n        i0.ɵɵtext(82, \"Provide Your Feedback\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(83, \"p\");\n        i0.ɵɵtext(84, \"How was your campus visit?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(85, \"textarea\", 43);\n        i0.ɵɵelementStart(86, \"label\", 44);\n        i0.ɵɵtext(87, \"Additional Comments:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(88, \"textarea\", 45)(89, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(90, \"button\", 46);\n        i0.ɵɵtext(91, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(92, \"button\", 47);\n        i0.ɵɵlistener(\"click\", function SurveyFormComponent_Template_button_click_92_listener() {\n          i0.ɵɵrestoreView(_r1);\n          const _r0 = i0.ɵɵreference(2);\n          return i0.ɵɵresetView(ctx.onReset(_r0));\n        });\n        i0.ɵɵtext(93, \"Reset\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.firstName);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.lastName);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.email);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.address);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.city);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.state);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.zip);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.tel);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.date);\n      }\n    },\n    dependencies: [i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.PatternValidator, i3.NgModel, i3.NgForm],\n    styles: [\"label[_ngcontent-%COMP%] {\\n    display: block;\\n    margin-bottom: 10px;\\n}\\n\\nlabel[_ngcontent-%COMP%], input[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%] {\\n    width: 100%;\\n    margin-bottom: 10px;\\n}\\nbutton[_ngcontent-%COMP%] {\\n    background-color: #FFCC33; \\n\\n    color: #006633; \\n\\n    padding: 10px 20px;\\n    border: none;\\n    cursor: pointer;\\n    transition: background-color 0.3s;\\n}\\n\\nbutton[_ngcontent-%COMP%]:hover {\\n    background-color: #e5b025; \\n}\\n\\n\\n\\n.required-label[_ngcontent-%COMP%]::after {\\n    content: \\\"*\\\";\\n    color: red; \\n    margin-left: 5px; \\n}\\n\\n.checkbox-label[_ngcontent-%COMP%], .radio-label[_ngcontent-%COMP%] {\\n    width: auto;\\n    display: inline-block;\\n    margin-right: 10px;\\n}\\n\\n.feedback-box[_ngcontent-%COMP%], .preferences-box[_ngcontent-%COMP%] {\\n    margin: 20px auto;\\n    max-width: 600px;\\n    padding: 20px;\\n    border: 1px solid #FFCC33; \\n\\n    background-color: #006633; \\n\\n    color: #FFCC33; \\n\\n}\\n\\n\\n\\n.form-container[_ngcontent-%COMP%] {\\n    padding: 20px 0; \\n\\n    background-color: #006633; \\n\\n    color: #FFCC33; \\n\\n    max-height: 100vh; \\n\\n    overflow-y: scroll; \\n\\n    margin: 0; \\n\\n    width: 100vw; \\n\\n    box-sizing: border-box; \\n\\n}\\n\\n.image-container[_ngcontent-%COMP%] {\\n    max-width: 100%;\\n    text-align: center;\\n    padding: 20px 0; \\n\\n}\\n\\n\\n\\n.form-container[_ngcontent-%COMP%]::-webkit-scrollbar {\\n    width: 12px; \\n\\n}\\n\\n.form-container[_ngcontent-%COMP%]::-webkit-scrollbar-track {\\n    background: transparent; \\n\\n}\\n\\n.form-container[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\\n    background: #FFCC33; \\n\\n}\\n\\n.form-container[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\\n    background: #e5b025; \\n\\n}\\n\\n\\n\\nhtml[_ngcontent-%COMP%], body[_ngcontent-%COMP%] {\\n    margin: 0;\\n    padding: 0;\\n    height: 100%;\\n    width: 100%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3VydmV5LWZvcm0vc3VydmV5LWZvcm0uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGNBQWM7SUFDZCxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSx5QkFBeUIsRUFBRSxvQkFBb0I7SUFDL0MsY0FBYyxFQUFFLDZCQUE2QjtJQUM3QyxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGVBQWU7SUFDZixpQ0FBaUM7QUFDckM7O0FBRUE7SUFDSSx5QkFBeUI7QUFDN0I7O0FBRUEscUNBQXFDO0FBQ3JDO0lBQ0ksWUFBWTtJQUNaLFVBQVU7SUFDVixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gscUJBQXFCO0lBQ3JCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLHlCQUF5QixFQUFFLG9CQUFvQjtJQUMvQyx5QkFBeUIsRUFBRSx5QkFBeUI7SUFDcEQsY0FBYyxFQUFFLGtCQUFrQjtBQUN0Qzs7QUFFQSxxRUFBcUU7QUFDckU7SUFDSSxlQUFlLEVBQUUsdURBQXVEO0lBQ3hFLHlCQUF5QixFQUFFLHlCQUF5QjtJQUNwRCxjQUFjLEVBQUUsa0JBQWtCO0lBQ2xDLGlCQUFpQixFQUFFLG1DQUFtQztJQUN0RCxrQkFBa0IsRUFBRSxxQ0FBcUM7SUFDekQsU0FBUyxFQUFFLCtCQUErQjtJQUMxQyxZQUFZLEVBQUUsMkNBQTJDO0lBQ3pELHNCQUFzQixFQUFFLDhDQUE4QztBQUMxRTs7QUFFQTtJQUNJLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsZUFBZSxFQUFFLCtCQUErQjtBQUNwRDs7QUFFQSx3REFBd0Q7QUFDeEQ7SUFDSSxXQUFXLEVBQUUsMkJBQTJCO0FBQzVDOztBQUVBO0lBQ0ksdUJBQXVCLEVBQUUsMkJBQTJCO0FBQ3hEOztBQUVBO0lBQ0ksbUJBQW1CLEVBQUUsaUNBQWlDO0FBQzFEOztBQUVBO0lBQ0ksbUJBQW1CLEVBQUUsNEJBQTRCO0FBQ3JEOztBQUVBLHNFQUFzRTtBQUN0RTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1YsWUFBWTtJQUNaLFdBQVc7QUFDZiIsInNvdXJjZXNDb250ZW50IjpbImxhYmVsIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxubGFiZWwsIGlucHV0LCB0ZXh0YXJlYSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuYnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkNDMzM7IC8qIEdNVSBHb2xkIEJ1dHRvbiAqL1xyXG4gICAgY29sb3I6ICMwMDY2MzM7IC8qIEdNVSBHcmVlbiBUZXh0IG9uIEJ1dHRvbiAqL1xyXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjNzO1xyXG59XHJcblxyXG5idXR0b246aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U1YjAyNTsgXHJcbn1cclxuXHJcbi8qIFN0eWxlIGZvciB0aGUgcmVxdWlyZWQgaW5kaWNhdG9yICovXHJcbi5yZXF1aXJlZC1sYWJlbDo6YWZ0ZXIge1xyXG4gICAgY29udGVudDogXCIqXCI7XHJcbiAgICBjb2xvcjogcmVkOyBcclxuICAgIG1hcmdpbi1sZWZ0OiA1cHg7IFxyXG59XHJcblxyXG4uY2hlY2tib3gtbGFiZWwsIC5yYWRpby1sYWJlbCB7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcclxufVxyXG5cclxuLmZlZWRiYWNrLWJveCwgLnByZWZlcmVuY2VzLWJveCB7XHJcbiAgICBtYXJnaW46IDIwcHggYXV0bztcclxuICAgIG1heC13aWR0aDogNjAwcHg7XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI0ZGQ0MzMzsgLyogR01VIEdvbGQgQm9yZGVyICovXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2NjMzOyAvKiBHTVUgR3JlZW4gQmFja2dyb3VuZCAqL1xyXG4gICAgY29sb3I6ICNGRkNDMzM7IC8qIEdNVSBHb2xkIFRleHQgKi9cclxufVxyXG5cclxuLyogQWRqdXN0IHRoZSBmb3JtIGNvbnRhaW5lciB0byBoYXZlIHBhZGRpbmcgb25seSBhdCB0b3AgYW5kIGJvdHRvbSAqL1xyXG4uZm9ybS1jb250YWluZXIge1xyXG4gICAgcGFkZGluZzogMjBweCAwOyAvKiBUb3AgYW5kIGJvdHRvbSBwYWRkaW5nIG9ubHksIHJlbW92ZSByaWdodCBhbmQgbGVmdCAqL1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNjYzMzsgLyogR01VIEdyZWVuIEJhY2tncm91bmQgKi9cclxuICAgIGNvbG9yOiAjRkZDQzMzOyAvKiBHTVUgR29sZCBUZXh0ICovXHJcbiAgICBtYXgtaGVpZ2h0OiAxMDB2aDsgLyogTWF4aW11bSBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0ICovXHJcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7IC8qIEFkZCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaWYgbmVlZGVkICovXHJcbiAgICBtYXJnaW46IDA7IC8qIFJlbW92ZSBhbnkgZGVmYXVsdCBtYXJnaW5zICovXHJcbiAgICB3aWR0aDogMTAwdnc7IC8qIE1ha2Ugc3VyZSBpdCB0YWtlcyBmdWxsIHZpZXdwb3J0IHdpZHRoICovXHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiBJbmNsdWRlIHBhZGRpbmcgaW4gdGhlIGhlaWdodCBjYWxjdWxhdGlvbiAqL1xyXG59XHJcblxyXG4uaW1hZ2UtY29udGFpbmVyIHtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDIwcHggMDsgLyogQWRkIHRvcCBhbmQgYm90dG9tIHBhZGRpbmcgKi9cclxufVxyXG5cclxuLyogU3R5bGUgZm9yIHRoZSBzY3JvbGxiYXIgKGZvciBXZWJLaXQtYmFzZWQgYnJvd3NlcnMpICovXHJcbi5mb3JtLWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXIge1xyXG4gICAgd2lkdGg6IDEycHg7IC8qIFdpZHRoIG9mIHRoZSBzY3JvbGxiYXIgKi9cclxufVxyXG5cclxuLmZvcm0tY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XHJcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgLyogVHJhbnNwYXJlbnQgYmFja2dyb3VuZCAqL1xyXG59XHJcblxyXG4uZm9ybS1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcclxuICAgIGJhY2tncm91bmQ6ICNGRkNDMzM7IC8qIEdNVSBHb2xkIENvbG9yIGZvciB0aGUgdGh1bWIgKi9cclxufVxyXG5cclxuLmZvcm0tY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZTViMDI1OyAvKiBHTVUgR29sZCBDb2xvciBvbiBob3ZlciAqL1xyXG59XHJcblxyXG4vKiBFbnN1cmUgYm9keSBhbmQgaHRtbCBlbGVtZW50cyB0YWtlIGZ1bGwgaGVpZ2h0IGFuZCBubyBleHRyYSBzcGFjZSAqL1xyXG5odG1sLCBib2R5IHtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["SurveyFormComponent","constructor","surveyService","router","user","firstName","lastName","address","city","state","zip","tel","date","email","formErrors","onSubmit","form","valid","clearFormErrors","validateName","join","validateAddress","validateCity","validateState","errorMessages","collectErrorMessages","length","window","alert","console","log","value","Survey","telephone","dateOfSurvey","likedAboutCampus","interestOrigin","recommendationLikelihood","feedback","additionalComments","navigate","Object","values","filter","error","key","hasOwnProperty","formKey","name","type","message","regexName","test","regexAddress","regexCity","regexState","statesArray","includes","toUpperCase","onReset","resetForm","checkboxes","document","querySelectorAll","forEach","checkbox","checked","radios","radio","datalists","datalist","textareas","textarea","_","i0","ɵɵdirectiveInject","i1","SurveyService","i2","Router","_2","selectors","decls","vars","consts","template","SurveyFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","SurveyFormComponent_Template_form_ngSubmit_1_listener","ɵɵrestoreView","_r1","_r0","ɵɵreference","ɵɵresetView","ɵɵelement","ɵɵelementEnd","ɵɵtext","SurveyFormComponent_Template_input_ngModelChange_8_listener","$event","SurveyFormComponent_Template_input_ngModelChange_11_listener","SurveyFormComponent_Template_input_ngModelChange_14_listener","SurveyFormComponent_Template_input_ngModelChange_17_listener","SurveyFormComponent_Template_input_ngModelChange_20_listener","SurveyFormComponent_Template_input_ngModelChange_23_listener","SurveyFormComponent_Template_input_ngModelChange_26_listener","SurveyFormComponent_Template_input_ngModelChange_29_listener","SurveyFormComponent_Template_input_ngModelChange_32_listener","SurveyFormComponent_Template_button_click_92_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\18049\\Desktop\\CS642\\SWE642\\final-swe642-project\\client\\src\\app\\survey-form\\survey-form.component.ts","C:\\Users\\18049\\Desktop\\CS642\\SWE642\\final-swe642-project\\client\\src\\app\\survey-form\\survey-form.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { SurveyService } from '../services/survey.service';\r\n\r\n@Component({\r\n  selector: 'app-survey-form',\r\n  templateUrl: './survey-form.component.html',\r\n  styleUrls: ['./survey-form.component.css']\r\n})\r\nexport class SurveyFormComponent {\r\n  constructor(\r\n    private surveyService: SurveyService, // Inject the SurveyService\r\n    private router: Router\r\n  ) { }\r\n\r\n  user = {\r\n    firstName: '',\r\n    lastName: '',\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    tel: '', \r\n    date: '',\r\n    email: ''\r\n  };\r\n\r\n  // Error messages will be stored here\r\n  formErrors: { [key: string]: string } = {\r\n    firstName: '',\r\n    lastName: '',\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n  };\r\n\r\n  onSubmit(form: NgForm) {\r\n\r\n    if (!form.valid) {\r\n      return;\r\n  }\r\n    // Clear previous errors\r\n    this.clearFormErrors();\r\n\r\n    // Validate each field and accumulate error messages\r\n    this.formErrors['firstName'] = this.validateName(this.user.firstName, \"first\").join(' ');\r\n    this.formErrors['lastName'] = this.validateName(this.user.lastName, \"last\").join(' ');\r\n    this.formErrors['address'] = this.validateAddress(this.user.address).join(' ');\r\n    this.formErrors['city'] = this.validateCity(this.user.city).join(' ');\r\n    this.formErrors['state'] = this.validateState(this.user.state).join(' ');\r\n\r\n    // Collect error messages\r\n    const errorMessages = this.collectErrorMessages();\r\n\r\n    // Check if there are any error messages\r\n    if (errorMessages.length) {\r\n      // Alert the error messages\r\n      window.alert(errorMessages);\r\n      return; // Stop the submission since there are errors\r\n    }\r\n    // If there are no errors, proceed with form submission\r\n    console.log('Form data', form.value);\r\n    // After submission logic, navigate to the root page\r\n    user: Survey = {\r\n      firstName: '',\r\n      lastName: '',\r\n      address: '',\r\n      city: '',\r\n      state: '',\r\n      zip: '',\r\n      telephone: '',\r\n      email: '',\r\n      dateOfSurvey: '', // Ensure you format the date as expected by your backend\r\n      likedAboutCampus: '',\r\n      interestOrigin: '',\r\n      recommendationLikelihood: '',\r\n      feedback: '',\r\n      additionalComments: '',\r\n    };\r\n    \r\n    // TODO: Add form submission logic here\r\n    this.router.navigate(['/']);\r\n    \r\n  }\r\n\r\n  // Helper method to collect error messages\r\n  private collectErrorMessages(): string {\r\n    return Object.values(this.formErrors).filter(error => error.length > 0).join('\\n');\r\n  }\r\n\r\n  private clearFormErrors() {\r\n    for (const key in this.formErrors) {\r\n      if (this.formErrors.hasOwnProperty(key)) {\r\n        const formKey = key as keyof typeof this.formErrors;\r\n        this.formErrors[formKey] = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  validateName(name: string, type:string): string[] {\r\n    let message = \"\"\r\n    if(type === \"first\"){\r\n      message = \"First name should only contain alphabet letters.\"\r\n    }\r\n    else{\r\n      message = \"Last name should only contain alphabet letters.\"\r\n    }\r\n    const regexName = /^[a-zA-Z\\s]+$/;\r\n    return regexName.test(name) ? [] : [message];\r\n  }\r\n\r\n  validateAddress(address: string): string[] {\r\n    const regexAddress = /^\\d+\\s[A-Za-z0-9\\s.,'-]+$/;\r\n    return regexAddress.test(address) ? [] : [\"Address is not fomrmatted correctly, it should only contain alphanumeric values, commas, periods, apostrophes, hyphens, and spaces.\"];\r\n  }\r\n\r\n  validateCity(city: string): string[] {\r\n    const regexCity = /^[A-Za-z\\s]+$/;\r\n    return regexCity.test(city) ? [] : [\"City should only contain letters and spaces.\"];\r\n  }\r\n\r\n  validateState(state: string): string[] {\r\n    const regexState = /^[A-Za-z]{2}$/;\r\n    const statesArray = [\r\n      'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL',\r\n      'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT',\r\n      'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI',\r\n      'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'\r\n    ];\r\n    return regexState.test(state) && statesArray.includes(state.toUpperCase()) ? [] : [\"State should be a 2-letter code corresponding to a valid US state.\"];\r\n  }\r\n\r\n  onReset(form: NgForm) {\r\n    // Reset the form (including user values)\r\n    form.resetForm();\r\n  \r\n    // Clear form errors\r\n    this.clearFormErrors();\r\n  \r\n    // Clear radio buttons and checkboxes\r\n    const checkboxes = document.querySelectorAll<HTMLInputElement>('input[type=\"checkbox\"]');\r\n    checkboxes.forEach((checkbox) => {\r\n      checkbox.checked = false;\r\n    });\r\n  \r\n    const radios = document.querySelectorAll<HTMLInputElement>('input[type=\"radio\"]');\r\n    radios.forEach((radio) => {\r\n      radio.checked = false;\r\n    });\r\n  \r\n    // Clear datalists\r\n    const datalists = document.querySelectorAll<HTMLInputElement>('input[list]');\r\n    datalists.forEach((datalist) => {\r\n      datalist.value = '';\r\n    });\r\n  \r\n    // Clear text areas\r\n    const textareas = document.querySelectorAll<HTMLTextAreaElement>('textarea');\r\n    textareas.forEach((textarea) => {\r\n      textarea.value = '';\r\n    });\r\n  }\r\n  \r\n}","<div class=\"form-container\">\r\n    <form #surveyForm=\"ngForm\" (ngSubmit)=\"onSubmit(surveyForm)\" class=\"form-section\" ngNativeValidate>\r\n        <div class=\"image-container\">\r\n            <img src=\"assets/logo2.png\" alt=\"GMU mascot\">\r\n        </div>\r\n\r\n        <div class=\"feedback-box\">\r\n            <label for=\"firstName\"class=\"required-label\">First Name:</label>\r\n            <input type=\"text\" id=\"firstName\" name=\"firstName\" [(ngModel)]=\"user.firstName\" required>\r\n        \r\n            <label for=\"lastName\"class=\"required-label\">Last Name:</label>\r\n            <input type=\"text\" id=\"lastName\" name=\"lastName\" [(ngModel)]=\"user.lastName\" required>\r\n        \r\n            <label for=\"email\"class=\"required-label\">Email:</label>\r\n            <input type=\"email\" id=\"email\" name=\"email\"  [(ngModel)]=\"user.email\" required placeholder=\"example@domain.com\">\r\n        \r\n            <label for=\"address\"class=\"required-label\">Address:</label>\r\n            <input type=\"text\" id=\"address\" name=\"address\" [(ngModel)]=\"user.address\" required>\r\n        \r\n            <label for=\"city\" class=\"required-label\">City:</label>\r\n            <input type=\"text\" id=\"city\" name=\"city\" [(ngModel)]=\"user.city\" required>\r\n        \r\n            <label for=\"state\" class=\"required-label\">State:</label>\r\n            <input type=\"text\" id=\"state\" name=\"state\" [(ngModel)]=\"user.state\" required>\r\n       \r\n            <label for=\"zip\" class=\"required-label\">Zip:</label>\r\n            <input type=\"text\" id=\"zip\" name=\"zip\" [(ngModel)]=\"user.zip\" pattern=\"\\d{5}(-\\d{4})?\" title=\"Please enter a valid ZIP code.\" required>\r\n        \r\n            <label for=\"tel\" class=\"required-label\">Telephone Number:</label>\r\n            <input type=\"tel\" id=\"tel\" name=\"tel\" [(ngModel)]=\"user.tel\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" title=\"Format: 123-456-7890\" required placeholder=\"555-555-5555\">\r\n        \r\n            <label for=\"date\" class=\"required-label\">Date of Survey:</label>\r\n            <input type=\"date\" id=\"date\" name=\"date\" [(ngModel)]=\"user.date\" required placeholder=\"YYYY-MM-DD\">\r\n        </div>\r\n\r\n        <div class=\"preferences-box\">\r\n            <!-- Giving the user options to select from -->\r\n            <h5>What did you like most about the campus?</h5>\r\n            <label class=\"checkbox-label\"><input type=\"checkbox\" id=\"students\" name=\"preferences\" value=\"students\"> Students</label>\r\n            <label class=\"checkbox-label\"><input type=\"checkbox\" id=\"location\" name=\"preferences\" value=\"location\"> Location</label>\r\n            <label class=\"checkbox-label\"><input type=\"checkbox\" id=\"campus\" name=\"preferences\" value=\"campus\"> Campus</label>\r\n            <label class=\"checkbox-label\"><input type=\"checkbox\" id=\"atmosphere\" name=\"preferences\" value=\"atmosphere\"> Atmosphere</label>\r\n            <label class=\"checkbox-label\"><input type=\"checkbox\" id=\"dorm_rooms\" name=\"preferences\" value=\"dorm_rooms\"> Dorms</label>\r\n            <label class=\"checkbox-label\"><input type=\"checkbox\" id=\"sports\" name=\"preferences\" value=\"sports\"> Sports</label>\r\n            <br><br>\r\n            <h5>How did you become interested in the university?</h5>\r\n            <label class=\"radio-label\"><input type=\"radio\" id=\"friends\" name=\"interest\" value=\"friends\"> Friends</label>\r\n            <label class=\"radio-label\"><input type=\"radio\" id=\"television\" name=\"interest\" value=\"television\"> Television</label>\r\n            <label class=\"radio-label\"><input type=\"radio\" id=\"internet\" name=\"interest\" value=\"internet\"> Internet</label>\r\n            <label class=\"radio-label\"><input type=\"radio\" id=\"other\" name=\"interest\" value=\"other\"> Other</label>\r\n            <br><br>\r\n            <label for=\"recommendation\"><h5>Likelihood Of Recommending This School To Other Students:</h5></label>\r\n            <input list=\"recommending\" id=\"recommendation\" name=\"recommendation\">\r\n            <datalist id=\"recommending\">\r\n                <option value=\"Very Likely\">\r\n                <option value=\"Likely\">\r\n                <option value=\"Unlikely\">\r\n            </datalist>\r\n        </div>\r\n\r\n        <!-- Large text boxes for users-->\r\n        <div class=\"feedback-box\">\r\n            <h3>Provide Your Feedback</h3>\r\n            <p>How was your campus visit?</p>\r\n            <textarea rows=\"5\" cols=\"50\" placeholder=\"Type your feedback here...\"></textarea>\r\n            \r\n            <label for=\"additionalComments\">Additional Comments:</label>\r\n            <textarea id=\"additionalComments\" rows=\"5\" cols=\"50\" placeholder=\"Type any additional comments here...\"></textarea>\r\n            <br>\r\n        </div>\r\n\r\n        <button type=\"submit\">Submit</button>\r\n        <button type=\"button\" (click)=\"onReset(surveyForm)\">Reset</button>\r\n    </form>\r\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}